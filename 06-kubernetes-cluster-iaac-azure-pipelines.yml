trigger:
- main

variables:
  tag: $(Build.BuildId)
  vmImageName: 'ubuntu-latest'


stages:
  - stage: IAAC
    displayName: Create Infrastructure
    jobs:
      - job: Create
        displayName: Create IAAC Terraform
        pool:
          vmImage: $(vmImageName)
        steps:
        - script: echo Hello, world!
          displayName: 'Run a one-line script'
        - task: DownloadSecureFile@1
          name: publicKey
          inputs:
            secureFile: 'azure_rsa.pub'
        - task: TerraformCLI@0
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            backendType: 'azurerm'
            backendServiceArm: 'az-rm-sc'
            ensureBackend: true
            backendAzureRmResourceGroupName: 'terraform-backend-rg'
            backendAzureRmResourceGroupLocation: 'centralindia'
            backendAzureRmStorageAccountName: 'storageaccmstfstate'
            backendAzureRmContainerName: 'storageaccmscontainer'
            backendAzureRmKey: 'kubernetes-dev.tfstate'
            allowTelemetryCollection: true
        - task: TerraformCLI@0
          inputs:
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            environmentServiceName: 'az-rm-sc'
            commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publicKey.secureFilePath)'
            allowTelemetryCollection: true
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'nodejs-microservices-docker-hub'
            repository: 'msinfoorigin/nodejs-microservices-devops'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            tags: '$(tag)'
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: '**/*.yaml'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'manifests'
            publishLocation: 'Container'
  - stage: Deploy
    displayName: Deploy image
    jobs:
    - job: Deploy
      displayName: Deploy
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'manifests'
          itemPattern: '**/*.yaml'
          targetPath: '$(System.ArtifactsDirectory)'
